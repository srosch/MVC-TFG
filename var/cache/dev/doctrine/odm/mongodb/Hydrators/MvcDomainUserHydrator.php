<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\Query\Query;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class MvcDomainUserHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="string") */
        if (isset($data['username']) || (! empty($this->class->fieldMappings['username']['nullable']) && array_key_exists('username', $data))) {
            $value = $data['username'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['username']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['username']->setValue($document, $return);
            $hydratedData['username'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['usernameCanonical']) || (! empty($this->class->fieldMappings['usernameCanonical']['nullable']) && array_key_exists('usernameCanonical', $data))) {
            $value = $data['usernameCanonical'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['usernameCanonical']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['usernameCanonical']->setValue($document, $return);
            $hydratedData['usernameCanonical'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['email']) || (! empty($this->class->fieldMappings['email']['nullable']) && array_key_exists('email', $data))) {
            $value = $data['email'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['email']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['email']->setValue($document, $return);
            $hydratedData['email'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['emailCanonical']) || (! empty($this->class->fieldMappings['emailCanonical']['nullable']) && array_key_exists('emailCanonical', $data))) {
            $value = $data['emailCanonical'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['emailCanonical']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['emailCanonical']->setValue($document, $return);
            $hydratedData['emailCanonical'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['enabled']) || (! empty($this->class->fieldMappings['enabled']['nullable']) && array_key_exists('enabled', $data))) {
            $value = $data['enabled'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['enabled']['type'];
                $return = (bool) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['enabled']->setValue($document, $return);
            $hydratedData['enabled'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['salt']) || (! empty($this->class->fieldMappings['salt']['nullable']) && array_key_exists('salt', $data))) {
            $value = $data['salt'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['salt']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['salt']->setValue($document, $return);
            $hydratedData['salt'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['password']) || (! empty($this->class->fieldMappings['password']['nullable']) && array_key_exists('password', $data))) {
            $value = $data['password'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['password']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['password']->setValue($document, $return);
            $hydratedData['password'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['lastLogin'])) {
            $value = $data['lastLogin'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['lastLogin']->setValue($document, clone $return);
            $hydratedData['lastLogin'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['confirmationToken']) || (! empty($this->class->fieldMappings['confirmationToken']['nullable']) && array_key_exists('confirmationToken', $data))) {
            $value = $data['confirmationToken'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['confirmationToken']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['confirmationToken']->setValue($document, $return);
            $hydratedData['confirmationToken'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['passwordRequestedAt'])) {
            $value = $data['passwordRequestedAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['passwordRequestedAt']->setValue($document, clone $return);
            $hydratedData['passwordRequestedAt'] = $return;
        }

        /** @Field(type="collection") */
        if (isset($data['roles']) || (! empty($this->class->fieldMappings['roles']['nullable']) && array_key_exists('roles', $data))) {
            $value = $data['roles'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['roles']['type'];
                $return = $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['roles']->setValue($document, $return);
            $hydratedData['roles'] = $return;
        }

        /** @Field(type="id") */
        if (isset($data['_id']) || (! empty($this->class->fieldMappings['id']['nullable']) && array_key_exists('_id', $data))) {
            $value = $data['_id'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['id']['type'];
                $return = $value instanceof \MongoId ? (string) $value : $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['name']) || (! empty($this->class->fieldMappings['name']['nullable']) && array_key_exists('name', $data))) {
            $value = $data['name'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['name']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['name']->setValue($document, $return);
            $hydratedData['name'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['firstLastName']) || (! empty($this->class->fieldMappings['firstLastName']['nullable']) && array_key_exists('firstLastName', $data))) {
            $value = $data['firstLastName'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['firstLastName']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['firstLastName']->setValue($document, $return);
            $hydratedData['firstLastName'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['secondLastName']) || (! empty($this->class->fieldMappings['secondLastName']['nullable']) && array_key_exists('secondLastName', $data))) {
            $value = $data['secondLastName'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['secondLastName']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['secondLastName']->setValue($document, $return);
            $hydratedData['secondLastName'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['sex']) || (! empty($this->class->fieldMappings['sex']['nullable']) && array_key_exists('sex', $data))) {
            $value = $data['sex'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['sex']['type'];
                $return = (bool) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['sex']->setValue($document, $return);
            $hydratedData['sex'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['nif']) || (! empty($this->class->fieldMappings['nif']['nullable']) && array_key_exists('nif', $data))) {
            $value = $data['nif'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['nif']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['nif']->setValue($document, $return);
            $hydratedData['nif'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['cip']) || (! empty($this->class->fieldMappings['cip']['nullable']) && array_key_exists('cip', $data))) {
            $value = $data['cip'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['cip']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['cip']->setValue($document, $return);
            $hydratedData['cip'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['bloodType']) || (! empty($this->class->fieldMappings['bloodType']['nullable']) && array_key_exists('bloodType', $data))) {
            $value = $data['bloodType'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['bloodType']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['bloodType']->setValue($document, $return);
            $hydratedData['bloodType'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['birth'])) {
            $embeddedDocument = $data['birth'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['birth'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['birth'], $document, 'birth');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            if (empty($hints[Query::HINT_READ_ONLY])) {
                $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);
            }

            $this->class->reflFields['birth']->setValue($document, $return);
            $hydratedData['birth'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['contact'])) {
            $embeddedDocument = $data['contact'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['contact'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['contact'], $document, 'contact');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            if (empty($hints[Query::HINT_READ_ONLY])) {
                $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);
            }

            $this->class->reflFields['contact']->setValue($document, $return);
            $hydratedData['contact'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['primaryCenter'])) {
            $embeddedDocument = $data['primaryCenter'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['primaryCenter'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['primaryCenter'], $document, 'primaryCenter');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            if (empty($hints[Query::HINT_READ_ONLY])) {
                $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);
            }

            $this->class->reflFields['primaryCenter']->setValue($document, $return);
            $hydratedData['primaryCenter'] = $return;
        }
        return $hydratedData;
    }
}