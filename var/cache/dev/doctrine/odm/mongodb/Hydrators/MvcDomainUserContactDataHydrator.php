<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\Query\Query;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class MvcDomainUserContactDataHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="string") */
        if (isset($data['email']) || (! empty($this->class->fieldMappings['email']['nullable']) && array_key_exists('email', $data))) {
            $value = $data['email'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['email']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['email']->setValue($document, $return);
            $hydratedData['email'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['address']) || (! empty($this->class->fieldMappings['address']['nullable']) && array_key_exists('address', $data))) {
            $value = $data['address'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['address']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['address']->setValue($document, $return);
            $hydratedData['address'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['municipality']) || (! empty($this->class->fieldMappings['municipality']['nullable']) && array_key_exists('municipality', $data))) {
            $value = $data['municipality'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['municipality']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['municipality']->setValue($document, $return);
            $hydratedData['municipality'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['postalCode']) || (! empty($this->class->fieldMappings['postalCode']['nullable']) && array_key_exists('postalCode', $data))) {
            $value = $data['postalCode'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['postalCode']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['postalCode']->setValue($document, $return);
            $hydratedData['postalCode'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['telephone']) || (! empty($this->class->fieldMappings['telephone']['nullable']) && array_key_exists('telephone', $data))) {
            $value = $data['telephone'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['telephone']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['telephone']->setValue($document, $return);
            $hydratedData['telephone'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['mobilephone']) || (! empty($this->class->fieldMappings['mobilephone']['nullable']) && array_key_exists('mobilephone', $data))) {
            $value = $data['mobilephone'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['mobilephone']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['mobilephone']->setValue($document, $return);
            $hydratedData['mobilephone'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['notifications']) || (! empty($this->class->fieldMappings['notifications']['nullable']) && array_key_exists('notifications', $data))) {
            $value = $data['notifications'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['notifications']['type'];
                $return = (bool) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['notifications']->setValue($document, $return);
            $hydratedData['notifications'] = $return;
        }
        return $hydratedData;
    }
}