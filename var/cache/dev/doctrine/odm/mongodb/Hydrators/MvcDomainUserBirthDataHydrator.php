<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\Query\Query;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class MvcDomainUserBirthDataHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="date") */
        if (isset($data['date'])) {
            $value = $data['date'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['date']->setValue($document, clone $return);
            $hydratedData['date'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['place']) || (! empty($this->class->fieldMappings['place']['nullable']) && array_key_exists('place', $data))) {
            $value = $data['place'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['place']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['place']->setValue($document, $return);
            $hydratedData['place'] = $return;
        }

        /** @Field(type="float") */
        if (isset($data['weight']) || (! empty($this->class->fieldMappings['weight']['nullable']) && array_key_exists('weight', $data))) {
            $value = $data['weight'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['weight']['type'];
                $return = (float) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['weight']->setValue($document, $return);
            $hydratedData['weight'] = $return;
        }

        /** @Field(type="float") */
        if (isset($data['size']) || (! empty($this->class->fieldMappings['size']['nullable']) && array_key_exists('size', $data))) {
            $value = $data['size'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['size']['type'];
                $return = (float) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['size']->setValue($document, $return);
            $hydratedData['size'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['notes']) || (! empty($this->class->fieldMappings['notes']['nullable']) && array_key_exists('notes', $data))) {
            $value = $data['notes'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['notes']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['notes']->setValue($document, $return);
            $hydratedData['notes'] = $return;
        }
        return $hydratedData;
    }
}